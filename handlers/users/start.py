from loader import dp
import requests
from data.config import BASE_URL
from keyboards.inline.main import change_lang, instructor
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup, CallbackQuery
from states.main import InstructorForm, EditInstructor, DeleteIns, Info
from aiogram.dispatcher import FSMContext
from keyboards.default.main import regions, categories, text_ins_reg, text_ins_up, info_btn_for_ins, main_btn, \
    text_info, info_btn, menu_instructor, profile_delete
import re

lang = ''


@dp.message_handler(commands=['start'])
async def stt(mes: Message):
    res = requests.get(url=f"{BASE_URL}/session/user/?id={mes.from_user.id}")
    r = res.json()
    if r['message'] == "Instructor":
        if lang == 'ru':
            await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_instructor(lang))
        else:
            await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(
            f"–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º, {mes.from_user.full_name}!\n–ê–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥",
            reply_markup=change_lang)


@dp.callback_query_handler(text=['uz', 'ru'])
async def start(call: CallbackQuery):
    res = requests.get(url=f"{BASE_URL}/session/user/?id={call.from_user.id}")
    r = res.json()
    await call.message.delete()
    await call.answer(cache_time=3)
    global lang
    if r['message'] == "Instructor":
        if call.data == 'uz':
            lang = 'uz'
            await call.message.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_instructor(lang))
        elif call.data == 'ru':
            lang = 'ru'
            await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_instructor(lang))
    else:
        if call.data == 'uz':
            lang = 'uz'
            await call.message.answer(
                f"–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º, {call.from_user.full_name}!\n–ê–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑. –ë–æ—Ç–∏–º–∏–∑–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à —É—á—É–Ω —û–∑–∏–Ω–≥–∏–∑–≥–∞ –∫–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.",
                reply_markup=main_btn(lang))
        elif call.data == 'ru':
            lang = 'ru'
            await call.message.answer(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.full_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —Å–µ–±—è –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª",
                reply_markup=main_btn(lang))


@dp.message_handler(text=["–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "–¢–∏–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à"])
async def lang(mes: Message):
    await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=change_lang)


@dp.message_handler(text=["–ú–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"])
async def info(mes: Message):
    if mes.text == "–ú–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à":
        await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=info_btn(lang))
    else:
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=info_btn(lang))


@dp.message_handler(text=["–¢–∞—Ä–∏—Ñ–ª–∞—Ä", "–¢–∞—Ä–∏—Ñ—ã", "–¢–µ—Å—Ç—ã", "–¢–µ—Å—Ç –±—û–π–∏—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä", "‚¨ÖÔ∏èO—Ä—Ç–≥–∞", "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
                          "–û–Ω–ª–∞–π–Ω –¥–∞—Ä—Å–ª–∞—Ä", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∞—Ö", "Ô∏è–ü—Ä–æ—Ñ–∏–ª—å", "Ô∏è–ü—Ä–æ—Ñ–∏–ª—å"])
async def ind(mes: Message):
    if mes.text == "–¢–∞—Ä–∏—Ñ–ª–∞—Ä":
        await mes.answer(text_info()['text'])
    elif mes.text == "–¢–∞—Ä–∏—Ñ—ã":
        await mes.answer(text_info()['text_ru'])
    elif mes.text == "–¢–µ—Å—Ç—ã":
        await mes.answer(f"–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ. <b>{text_info()['bot_link']}</b>")
    elif mes.text == "–¢–µ—Å—Ç –±—û–π–∏—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä":
        await mes.answer(f"–ú–∞–≤–∑—É–ª–∞—Ä –±—û–π–∏—á–∞ —Ç–µ—Å—Ç–ª–∞—Ä —É—à–±—É –±–æ—Ç–¥–∞. <b>{text_info()['bot_link']}</b>")
    elif mes.text == "–û–Ω–ª–∞–π–Ω –¥–∞—Ä—Å–ª–∞—Ä":
        await mes.answer(text_info()['online_lesson'])
    elif mes.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∞—Ö":
        await mes.answer(text_info()['online_lesson_ru'])
    elif mes.text == "‚¨ÖÔ∏èO—Ä—Ç–≥–∞":
        await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=main_btn(lang))
    elif mes.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=main_btn(lang))
    elif mes.text == "Ô∏è–ü—Ä–æ—Ñ–∏–ª":
        await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_instructor(lang))
    elif mes.text == "Ô∏è–ü—Ä–æ—Ñ–∏–ª—å":
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_instructor(lang))


@dp.message_handler(text=["–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é", "–ë–æ—à –º–µ–Ω—é"])
async def edit_profile(mes: Message):
    if lang == 'uz':
        await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=info_btn_for_ins(lang))
    else:
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=info_btn_for_ins(lang))


@dp.message_handler(text=["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–ª–∞—Ä “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö"])
async def ma(mes: Message):
    res = requests.get(url=f"{BASE_URL}/session/")
    cts = res.json()
    if len(cts) == 0:
        if lang == 'uz':
            await mes.answer("–ë–∏–∑–¥–∞–Ω “≥–æ–∑–∏—Ä—á–∞ –∏–Ω—Å—Ç—Ä—Éc—Ç–æ—Ä–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω")
        else:
            await mes.answer("–ú—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤")
    else:
        markup = ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
        for i in cts:
            markup.insert(KeyboardButton(text=f"{i['tuman']}"))
        if lang == 'uz':
            markup.insert(KeyboardButton("‚¨ÖÔ∏èO—Ä—Ç–≥–∞"))
            await mes.answer('–é–∑–∏–Ω–≥–∏–∑–≥–∞ “õ—É–ª–∞–π –±—û–ª–≥–∞–Ω —Ç—É–º–∞–Ω–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥', reply_markup=markup)
        else:
            markup.insert(KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥"))
            await mes.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Ä–∞–π–æ–Ω', reply_markup=markup)
        await Info.tm.set()


@dp.message_handler(state=Info.tm)
async def tm(mes: Message, state: FSMContext):
    if (mes.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥") or (mes.text == "‚¨ÖÔ∏èO—Ä—Ç–≥–∞"):
        res = requests.get(url=f"{BASE_URL}/session/user/?id={mes.from_user.id}")
        r = res.json()
        if r['message'] == "Instructor":
            markup = info_btn_for_ins(lang)
        else:
            markup = info_btn(lang)
        if lang == 'uz':
            await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=markup)
        else:
            await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)
        await state.finish()
    else:
        res = requests.get(url=f"{BASE_URL}/session/?tum={mes.text}")
        cts = res.json()
        if cts:
            txt = ""
        else:
            txt = "Error"
        markup = ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
        if lang == 'uz':
            for i in cts:
                txt += f"–ò—Å–º: <b>{i['ism']}</b>\n–§–∞–º–∏–ª–∏—è: <b>{i['familiya']}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>{i['telefon']}</b>\n–ê–≤—Ç–æ–º–æ–±–∏–ª: <b>{i['moshina']}</b>\n–î–∞–≤–ª–∞—Ç —Ä–∞“õ–∞–º–∏: <b>{i['nomeri']}</b>\n"
            markup.insert(KeyboardButton("‚¨ÖÔ∏èO—Ä—Ç–≥–∞"))
            await mes.answer(txt, reply_markup=markup)
        else:
            for i in cts:
                txt += f"–ò–º—è: <b>{i['ism']}</b>\n–§–∞–º–∏–ª–∏—è: <b>{i['familiya']}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>{i['telefon']}</b>\n–ê–≤—Ç–æ–º–æ–±–∏–ª—å: <b>{i['moshina']}</b>\n–ì–æ—Å.–Ω–æ–º–µ—Ä: <b>{i['nomeri']}</b>\n"
            markup.insert(KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥"))
            await mes.answer(txt, reply_markup=markup)


@dp.message_handler(text=["üë®‚Äç‚úàÔ∏è–ü—Ä–æ—Ñ–∏–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", "üë®‚Äç‚úàÔ∏è–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"])
async def edit_profile(mes: Message):
    if lang == 'uz':
        await mes.answer("–ù–∏–º–∞–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–º–æ“õ—á–∏—Å–∏–∑?", reply_markup=instructor(lang))
    else:
        await mes.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=instructor(lang))


@dp.message_handler(text=["Ô∏è–ü—Ä–æ—Ñ–∏–ª", "Ô∏è–ü—Ä–æ—Ñ–∏–ª—å"])
async def edit_profile(mes: Message):
    if lang == 'uz':
        await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_instructor(lang))
    else:
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_instructor(lang))


@dp.message_handler(text=["üë®‚Äç‚úàÔ∏è–ü—Ä–æ—Ñ–∏–ª–Ω–∏ —û—á–∏—Ä–∏—à", "üë®‚Äç‚úàÔ∏è–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"])
async def a(mes: Message):
    if lang == 'uz':
        await mes.answer('–ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑–Ω–∏ —û—á–∏—Ä–º–æ“õ—á–∏–º–∏—Å–∏–∑?', reply_markup=profile_delete(lang))
    else:
        await mes.answer('–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?', reply_markup=profile_delete(lang))
    await DeleteIns.yes_or_no.set()


@dp.message_handler(text=["üë®‚Äç‚úàÔ∏èÔ∏è–ü—Ä–æ—Ñ–∏–ª", "üë®‚Äç‚úàÔ∏èÔ∏è–ü—Ä–æ—Ñ–∏–ª—å"])
async def get_profile(mes: Message):
    rp = requests.get(url=f"{BASE_URL}/instructor/{mes.from_user.id}/")
    res = rp.json()
    if lang == 'uz':
        text = f"–ò—Å–º–∏–Ω–≥–∏–∑: <b>{res['ism']}</b>\n"
        text += f"–§–∞–º–∏–ª–∏—è–Ω–≥–∏–∑: <b>{res['familiya']}</b>\n"
        text += f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑: <b>{res['telefon']}</b>\n"
        text += f"–ê–≤—Ç–æ–º–æ–±–∏–ª–∏–Ω–≥–∏–∑: <b>{res['moshina']}</b>\n"
        text += f"–Ø—à–∞—à —Ç—É–º–∞–Ω–∏–Ω–≥–∏–∑: <b>{res['tuman']}</b>\n"
        text += f"–¢–æ–∏—Ñ–∞–Ω–≥–∏–∑: <b>{res['toifa_name']}</b>\n"
        text += f"–î–∞–≤–ª–∞—Ç —Ä–∞“õ–∞–º–∏: <b>{res['nomeri']}</b>\n"
        await mes.answer(text, reply_markup=menu_instructor(lang))
    else:
        text = f"–í–∞—à–µ –∏–º—è: <b>{res['ism']}</b>\n"
        text += f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: <b>{res['familiya']}</b>\n"
        text += f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{res['telefon']}</b>\n"
        text += f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: <b>{res['moshina']}</b>\n"
        text += f"–í–∞—à –∞–¥—Ä–µ—Å: <b>{res['tuman']}</b>\n"
        text += f"–í–∞—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{res['toifa_name']}</b>\n"
        text += f"–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: <b>{res['nomeri']}</b>\n"
        await mes.answer(text, reply_markup=menu_instructor(lang))


@dp.message_handler(text=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –≤–∏–¥–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞', '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à'])
async def register(mes: Message):
    markup = ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    if mes.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à':
        markup.insert(KeyboardButton("‚¨ÖÔ∏èO—Ä—Ç–≥–∞"))
        await mes.answer(text_ins_reg()['ism'], reply_markup=markup)
    elif mes.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –≤–∏–¥–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞':
        markup.insert(KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥"))
        await mes.answer(text_ins_reg()['ism_ru'], reply_markup=markup)
    await InstructorForm.ism.set()


@dp.message_handler(state=InstructorForm.ism)
async def ism(mes: Message, state: FSMContext):
    if mes.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
        await state.finish()
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=main_btn(lang))
    elif mes.text == "‚¨ÖÔ∏èO—Ä—Ç–≥–∞":
        await state.finish()
        await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=main_btn(lang))
    else:
        await state.update_data(
            {"ism": mes.text}
        )
        if lang == 'uz':
            await mes.answer(text_ins_reg()['familiya'])
        else:
            await mes.answer(text_ins_reg()['familiya_ru'])
        await InstructorForm.next()


@dp.message_handler(state=InstructorForm.familiya)
async def familiya(mes: Message, state: FSMContext):
    await state.update_data(
        {'familiya': mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['telefon'])
    else:
        await mes.answer(text_ins_reg()['telefon_ru'])
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.telefon, regexp=re.compile(r"^[378]{2}|9[01345789]\d{7}$"))
async def telefon(mes: Message, state: FSMContext):
    await state.update_data(
        {'telefon': f"998{mes.text}"}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['manzil'], reply_markup=regions())
    else:
        await mes.answer(text_ins_reg()['manzil_ru'], reply_markup=regions())
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.telefon, content_types='text')
async def st(mes: Message):
    if lang == 'uz':
        await mes.answer(text_ins_reg()['telefon_qayta'])
    else:
        await mes.answer(text_ins_reg()['telefon_qayta_ru'])
    await InstructorForm.telefon.set()


@dp.message_handler(state=InstructorForm.tuman)
async def region(mes: Message, state: FSMContext):
    await state.update_data(
        {'tuman': mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['categoriya'], reply_markup=categories())
    else:
        await mes.answer(text_ins_reg()['categoriya_ru'], reply_markup=categories())
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.toifa)
async def category(mes: Message, state: FSMContext):
    await state.update_data(
        {'toifa': mes.text}
    )
    cat = await state.get_data()
    res = requests.get(url=f"{BASE_URL}/instructor/cars/?cat={cat['toifa']}")
    rg = res.json()
    markup = ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    for i in rg:
        markup.insert(KeyboardButton(text=f"{i['nomi']}"))
    if lang == 'uz':
        await mes.answer(text_ins_reg()['moshina'], reply_markup=markup)
    else:
        await mes.answer(text_ins_reg()['moshina_ru'], reply_markup=markup)
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.moshina)
async def car(mes: Message, state: FSMContext):
    await state.update_data(
        {'moshina': mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['moshina_nomeri'], reply_markup=ReplyKeyboardRemove())
    else:
        await mes.answer(text_ins_reg()['moshina_nomeri_ru'], reply_markup=ReplyKeyboardRemove())
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.nomeri, regexp=re.compile(
    r"^[0-9][150][ -]([A-Z][ -][0-9]{3}[ -][A-Z]{2})|([0-9]{3}[ -][A-Z]{3})$"))
async def create_instructor(mes: Message, state: FSMContext):
    data = await state.get_data()
    data['nomeri'] = mes.text
    data['telegram_id'] = mes.from_user.id
    res = requests.post(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    r = res.json()
    if lang == 'uz':
        await mes.answer(f"{mes.from_user.first_name} {r['message']}", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"{mes.from_user.first_name} {r['message_ru']}", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(state=InstructorForm.nomeri, content_types='text')
async def st(mes: Message):
    if lang == 'uz':
        await mes.answer(text_ins_reg()['moshina_nomeri_qayta'])
    else:
        await mes.answer(text_ins_reg()['moshina_nomeri_qayta_ru'])
    await InstructorForm.nomeri.set()


@dp.message_handler(state=DeleteIns.yes_or_no)
async def delete_profile(mes: Message, state: FSMContext):
    if (mes.text == '“≤–∞') or (mes.text == '–î–∞'):
        rp = requests.delete(url=f"{BASE_URL}/client/delete/{mes.from_user.id}/")
        if rp.status_code == 204:
            if lang == 'uz':
                await mes.answer("–ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑ —û—á–∏—Ä–∏–ª–¥–∏", reply_markup=ReplyKeyboardRemove())
            else:
                await mes.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω", reply_markup=ReplyKeyboardRemove())
        else:
            if lang == 'uz':
                await mes.answer("–ù–∏–º–∞–¥–∏—Ä —Ö–∞—Ç–æ –∫–µ—Ç–¥–∏ “õ–∞–π—Ç–∞–¥–∞–Ω —û—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥!")
            else:
                await mes.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
    elif (mes.text == '–ô—û“õ') or (mes.text == '–ù–µ—Ç'):
        if lang == 'uz':
            await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_instructor(lang))
        else:
            await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.callback_query_handler(
    text=['instructor:name', 'instructor:surname', 'instructor:phone', 'car', 'number', 'region', 'cat'])
async def set_state(call: CallbackQuery):
    if call.data == "instructor:name":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['ism'])
        else:
            await call.message.answer(text_ins_up()['ism_ru'])
        await EditInstructor.ism.set()
    elif call.data == "instructor:surname":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['familiya'])
        else:
            await call.message.answer(text_ins_up()['familiya_ru'])
        await EditInstructor.familiya.set()
    elif call.data == "instructor:phone":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['telefon'])
        else:
            await call.message.answer(text_ins_up()['telefon_ru'])
        await EditInstructor.telefon.set()
    elif call.data == "car":
        res = requests.get(url=f"{BASE_URL}/instructor/cars/")
        rg = res.json()
        markup = ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
        for i in rg:
            markup.insert(KeyboardButton(text=f"{i['nomi']}"))
        if lang == 'uz':
            await call.message.answer(text_ins_up()['moshina'], reply_markup=markup)
        else:
            await call.message.answer(text_ins_up()['moshina_ru'], reply_markup=markup)
        await EditInstructor.moshina.set()
    elif call.data == "region":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['manzil'], reply_markup=regions())
        else:
            await call.message.answer(text_ins_up()['manzil_ru'], reply_markup=regions())
        await EditInstructor.tuman.set()
    elif call.data == 'cat':
        if lang == 'uz':
            await call.message.answer(text_ins_up()['categoriya'], reply_markup=categories())
        else:
            await call.message.answer(text_ins_up()['categoriya_ru'], reply_markup=categories())
        await EditInstructor.toifa.set()
    elif call.data == "number":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['moshina_nomeri'])
        else:
            await call.message.answer(text_ins_up()['moshina_nomeri_ru'])
        await EditInstructor.nomeri.set()
    await call.answer(cache_time=3)


@dp.message_handler(content_types=['text'], state=EditInstructor.ism)
async def set_name(mes: Message, state: FSMContext):
    data = {'ism': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–ò—Å–º–∏–Ω–≥–∏–∑ <b>{res['ism']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω—ë–Ω <b>{res['ism']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(content_types=['text'], state=EditInstructor.familiya)
async def set_surname(mes: Message, state: FSMContext):
    data = {'familiya': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–§–∞–º–∏–ª–∏—è–Ω–≥–∏–∑ <b>{res['familiya']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω—ë–Ω <b>{res['familiya']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(regexp=re.compile(r"^[378]{2}|9[01345789]\d{7}$"), state=EditInstructor.telefon)
async def set_phone(mes: Message, state: FSMContext):
    data = {'telefon': f"998{mes.text}"}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω–≥–∏–∑ <b>{res['telefon']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω <b>{res['telefon']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(state=EditInstructor.telefon, content_types=['text'])
async def a(mes: Message):
    if lang == 'uz':
        await mes.answer(text_ins_up()['telefon_qayta'])
    else:
        await mes.answer(text_ins_up()['telefon_qayta_ru'])
    await EditInstructor.telefon.set()


@dp.message_handler(content_types=['text'], state=EditInstructor.tuman)
async def set_region(mes: Message, state: FSMContext):
    data = {'tuman': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–Ø—à–∞—à —Ç—É–º–∞–Ω–∏–Ω–≥–∏–∑ <b>{res['tuman']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à –∂–∏–ª–æ–π —Ä–∞–π–æ–Ω –∏–∑–º–µ–Ω—ë–Ω <b>{res['tuman']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(content_types=['text'], state=EditInstructor.toifa)
async def set_cat(mes: Message, state: FSMContext):
    data = {'toifa': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–¢–æ–∏—Ñ–∞–Ω–∏–Ω–≥–∏–∑ <b>{res['toifa_name']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω—ë–Ω <b>{res['toifa_name']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(state=EditInstructor.nomeri, regexp=re.compile(
    r"^[0-9][150][ -]([A-Z][ -][0-9]{3}[ -][A-Z]{2})|([0-9]{3}[ -][A-Z]{3})$"))
async def set_cat(mes: Message, state: FSMContext):
    data = {'nomeri': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–ú–æ—à–∏–Ω–∞–Ω–≥–∏–∑ —Ä–∞“õ–∞–º–∏ <b>{res['nomeri']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!",
                         reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–ù–æ–º–µ—Ä –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã –∏–∑–º–µ–Ω—ë–Ω <b>{res['nomeri']}</b>",
                         reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(state=EditInstructor.nomeri, content_types=['text'])
async def a(mes: Message):
    if lang == 'uz':
        await mes.answer(text_ins_up()['moshina_nomeri_qayta'])
    else:
        await mes.answer(text_ins_up()['moshina_nomeri_qayta_ru'])
    await EditInstructor.nomeri.set()


@dp.message_handler(content_types=['text'], state=EditInstructor.moshina)
async def set_cat(mes: Message, state: FSMContext):
    data = {'moshina': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–ú–æ—à–∏–Ω–∞–Ω–≥–∏–∑ <b>{res['moshina']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω <b>{res['moshina']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()
